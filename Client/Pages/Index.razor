@page "/"
@using Client.Models
@using System.Net.Http.Json
@inject HttpClient Http

<h1>My Personal Book collection</h1>

@if (errorMessage != null)
{
    <div style="color:red">@errorMessage</div>
    <button class="btn btn-primary" @onclick="ReloadBooks">Retry</button>
}
else if (isLoading)
{
    <p>Loading...</p>
}
else if (books == null)
{
    <p>No books found.</p>
}
else if (!books.Any())
{
    <p>No books found.</p>
}
else
{
    <label class="form-label">You can update the read status of the books below and click SAVE to apply changes.</label>
    <button class="btn btn-success mb-2" @onclick="SaveChanges" disabled="@isSaving">@((isSaving ? "Saving..." : "SAVE"))</button>
    <table class="table">
        <thead>
            <tr>
                <th>Cover</th>
                <th>Title</th>
                <th>Author</th>
                <th>Genre</th>
                <th>Read Status</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < books.Count; i++)
            {
                <tr>
                    <td>
                        <img src="@($"images/{string.Join("_", books[i].Title.Split())}.png")" alt="@books[i].Title cover" style="max-width:80px;max-height:120px;" onerror="this.style.display='none'" />
                    </td>
                    <td>@books[i].Title</td>
                    <td>@books[i].Author</td>
                    <td>@books[i].Genre</td>
                    <td>
                        <input type="checkbox" @bind="books[i].ReadStatusBool" />
                    </td>
                    <td>@books[i].Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookEditable> books;
    private string errorMessage;
    private bool isLoading = true;
    private bool isSaving = false;

    public class ApiResponse {
        public List<Book> value { get; set; }
    }

    public class BookEditable : Book
    {
        public bool ReadStatusBool
        {
            get => !string.IsNullOrWhiteSpace(ReadStatus) && ReadStatus.Trim().Equals("read", StringComparison.OrdinalIgnoreCase);
            set => ReadStatus = value ? "Read" : "Unread";
        }
        public bool IsDirty { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("https://lemon-pebble-088965b1e.1.azurestaticapps.net/data-api/api/Books");
            books = response?.value?.Select(b => new BookEditable {
                BookID = b.BookID,
                Title = b.Title,
                Author = b.Author,
                Genre = b.Genre,
                ReadStatus = b.ReadStatus,
                Description = b.Description
            }).ToList() ?? new List<BookEditable>();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load books. Please try again.\n" + ex.Message;
            books = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        isSaving = true;
        errorMessage = null;
        try
        {
            foreach (var book in books)
            {
                // Always update for demo; optimize by tracking IsDirty if needed
                var url = $"https://lemon-pebble-088965b1e.1.azurestaticapps.net/data-api/api/Books/BookID/{book.BookID}";
                var bookData = new Book
                {
                    BookID = book.BookID,
                    Title = book.Title,
                    Author = book.Author,
                    Genre = book.Genre,
                    ReadStatus = book.ReadStatus,
                    Description = book.Description
                };
                var response = await Http.PutAsJsonAsync(url, bookData);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = $"Failed to update BookID {book.BookID}: {response.ReasonPhrase}";
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to save changes.\n" + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ReloadBooks()
    {
        await LoadBooksAsync();
    }
}
