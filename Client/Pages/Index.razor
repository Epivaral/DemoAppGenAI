@page "/"
@using Client.Models
@using System.Net.Http.Json
@using System.Text.Json
@using System.Net.Http;
@using System.Text;
@inject HttpClient Http

<h1 class="cool-title">My Personal Book Collection</h1>
<style>
.cool-title {
    position: sticky;
    top: 0;
    z-index: 100;
    background: linear-gradient(90deg, #232526 0%, #414345 100%);
    color: #fff;
    padding: 0;
    margin: 0 0 24px 0;
    border-radius: 0 0 16px 16px;
    text-align: center;
    font-size: 2.8rem;
    font-weight: bold;
    letter-spacing: 2px;
    box-shadow: 0 4px 24px rgba(0,0,0,0.15);
    text-shadow: 1px 2px 8px #000a;
}
body {
    margin: 0;
    padding: 0;
}
.align-table-controls {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    max-width: 900px;
    margin: 0 auto 12px auto;
    gap: 16px;
}
.save-btn-dark {
    background: #222b3a;
    color: #fff;
    border: none;
    font-weight: bold;
    letter-spacing: 1px;
    min-width: 120px;
    padding: 8px 24px;
    border-radius: 6px;
    box-shadow: 0 2px 8px rgba(44,62,80,0.08);
    transition: background 0.2s;
}
.save-btn-dark:disabled {
    background: #444c5c;
    color: #ccc;
}
.save-btn-dark:hover:not(:disabled) {
    background: #2d3a4b;
}
</style>

@if (errorMessage != null)
{
    <div style="color:red">@errorMessage</div>
    <button class="btn btn-primary" @onclick="ReloadBooks">Retry</button>
}
else if (isLoading)
{
    <p>Loading...</p>
}
else if (books == null)
{
    <p>No books found.</p>
}
else if (!books.Any())
{
    <p>No books found.</p>
}
else
{
    <div class="align-table-controls">
        <label class="form-label mb-0">You can update the read status of the books below and click SAVE to apply changes.</label>
        <button class="save-btn-dark" @onclick="SaveChanges" disabled="@isSaving">@((isSaving ? "Saving..." : "SAVE"))</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Cover</th>
                <th>Title</th>
                <th>Author</th>
                <th>Genre</th>
                <th>Read Status</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>
                        <img src="@($"images/{string.Join("_", book.Title.Split())}.png")" alt="@book.Title cover" style="max-width:80px;max-height:120px;" onerror="this.style.display='none'" />
                    </td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.Genre</td>
                    <td>
                        <input type="checkbox" @bind="book.ReadStatusBool" />
                    </td>
                    <td>@book.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookEditable> books;
    private string errorMessage;
    private bool isLoading = true;
    private bool isSaving = false;

    public class ApiResponse {
        public List<Book> value { get; set; }
    }

    public class BookEditable : Book
    {
        private bool _readStatusBool;
        public bool ReadStatusBool
        {
            get => !string.IsNullOrWhiteSpace(ReadStatus) && ReadStatus.Trim().Equals("read", StringComparison.OrdinalIgnoreCase);
            set
            {
                var newStatus = value ? "Read" : "Unread";
                if (ReadStatus != newStatus)
                {
                    ReadStatus = newStatus;
                    IsDirty = true;
                }
            }
        }
        public bool IsDirty { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksAsync();
    }

    private async Task LoadBooksAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("https://lemon-pebble-088965b1e.1.azurestaticapps.net/data-api/api/Books");
            books = response?.value?.Select(b => new BookEditable {
                BookID = b.BookID,
                Title = b.Title,
                Author = b.Author,
                Genre = b.Genre,
                ReadStatus = b.ReadStatus,
                Description = b.Description
            }).ToList() ?? new List<BookEditable>();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load books. Please try again.\n" + ex.Message;
            books = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        isSaving = true;
        errorMessage = null;
        try
        {
            foreach (var book in books)
            {
                var url = $"https://lemon-pebble-088965b1e.1.azurestaticapps.net/data-api/api/Books/BookID/{book.BookID}";
                var bookData = new {
                    Title = book.Title,
                    Author = book.Author,
                    Genre = book.Genre,
                    ReadStatus = book.ReadStatus?.ToLower(),
                    Description = book.Description
                };
                var options = new JsonSerializerOptions { PropertyNamingPolicy = null };
                var json = JsonSerializer.Serialize(bookData, options);
                Console.WriteLine($"PUT payload for BookID {book.BookID}: {json}");
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                var response = await Http.PutAsync(url, content);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = $"Failed to update BookID {book.BookID}: {response.ReasonPhrase}";
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to save changes.\n" + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ReloadBooks()
    {
        await LoadBooksAsync();
    }

    private void OnReadStatusChanged(int index, object value)
    {
        if (books == null || index < 0 || index >= books.Count) return;
        bool isChecked = false;
        if (value is bool b)
            isChecked = b;
        else if (value is string s && bool.TryParse(s, out var parsed))
            isChecked = parsed;
        // Only set IsDirty if the value actually changed
        if (books[index].ReadStatusBool != isChecked)
        {
            books[index].ReadStatusBool = isChecked;
            books[index].IsDirty = true;
        }
        StateHasChanged();
    }
}
